From c54fe4027fd0223de044e8150dcc98aa5ec0414e Mon Sep 17 00:00:00 2001
From: kyle9 <orkrod98@gmail.com>
Date: Sat, 23 Jan 2021 11:31:55 -0700
Subject: [PATCH] Add refined solution for junit5 tutorial

---
 .../com/makotojava/learn/hellojunit5/App.java |  23 ---
 .../learn/hellojunit5/JUnit5AppTest.java      | 171 +-----------------
 2 files changed, 7 insertions(+), 187 deletions(-)

diff --git a/src/main/java/com/makotojava/learn/hellojunit5/App.java b/src/main/java/com/makotojava/learn/hellojunit5/App.java
index 46da54e..950e91f 100644
--- a/src/main/java/com/makotojava/learn/hellojunit5/App.java
+++ b/src/main/java/com/makotojava/learn/hellojunit5/App.java
@@ -1,20 +1,5 @@
 package com.makotojava.learn.hellojunit5;
 
-/*
- * Copyright 2017 Makoto Consulting Group, Inc.
- * 
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 public class App {
   /**
    * Computes the sum of the specified operands.
@@ -36,7 +21,6 @@ public class App {
    *           code, son.
    */
   public long add(long[] operands) {
-    // Compute the sum
     long ret = 0;
     if (operands == null) {
       throw new IllegalArgumentException("Operands argument cannot be null");
@@ -48,13 +32,6 @@ public class App {
       ret += operand;
     }
     
-    // TDD - add this once we run all the unit tests.
-    //
-    // TODO: As an exercise, implement this method so that all of the unit tests
-    /// you write for it pass. Once you do that, you're done!
-    //
-    // Hint: if you get stuck, look at the {@link com.makotojava.learn.hellojunit5.solution.App App class}
-    //
     return ret;
   }
 }
diff --git a/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java b/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
index 87ccae9..0317380 100644
--- a/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
+++ b/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
@@ -14,50 +14,32 @@ import java.time.LocalDateTime;
 import java.time.LocalTime;
 import java.time.Month;
 
-/**
- * JUnit 5 (with JUnitPlatform.class)
- * 
- * Class-level Exercises:
- * <ol>
- * <li>Enable Eclipse JUnit support for this test class using the {@link org.junit.runner.RunWith @RunWith} and
- * {@link org.junit.platform.runner.JUnitPlatform
- * JUnitPlatform} class.</li>
- * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
- * report.</li>
- * </ol>
- *
- */
 @Disabled
 @RunWith(JUnitPlatform.class)
 @DisplayName("Testing using JUnit 5")
 public class JUnit5AppTest {
 
-  // Create a JDK Logger here
   private static final Logger log = LoggerFactory.getLogger(JUnit5AppTest.class);
 
   private App appForTesting;
 
 
-  // Do something before ANY test is run in this class
   @BeforeAll
   public static void init() {
     log.info("init() called");
   }
 
-  // Do something after ALL tests in this class are run
   @AfterAll
   public static void done() {
     log.info("done() called");
   }
 
-  // Create an instance of the test class before each @Test method is executed
 
   @BeforeEach
   public void setUp() throws Exception {
     log.info("setUp() called");
     appForTesting = new App();
   }
-  // Destroy reference to the instance of the test class after each @Test method is executed
   @AfterEach
   public void tearDown() throws Exception {
     log.info("tearDown() called");
@@ -67,15 +49,10 @@ public class JUnit5AppTest {
   @Test
   @Disabled
   @DisplayName("A disabled test")
-  // Disabled test
   void testNotRun() {
     log.info("won't happen");
   }
 
-  /**
-   * testAdd() - Exercises: PICK UP HERE!
-   * ...
-   */
   @Test
   @DisplayName("When numbers are positive")
   public void testAdd() {
@@ -89,16 +66,9 @@ public class JUnit5AppTest {
 
   }
 
-  /**
-   * Class-level Exercises:
-   * 
-   */
   class NegativeNumbersTest {
     private App nestedClassApp;
-    /**
-     * testAdd() - Exercises:
-
-     */
+    
     @BeforeEach
     public void setUp() {
       nestedClassApp = new App();
@@ -124,37 +94,11 @@ public class JUnit5AppTest {
     }
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * </ol>
-   * 
-   */
   @Nested
   @DisplayName("when nums are pos and neg")
   class PositiveAndNegativeNumbersTest {
     private App nestedClassApp;
-    /**
-     * testAdd() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1, 2, -3, 4</li>
-     * <li>-20, 934, -110</li>
-     * <li>-2, -4, 6</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    
     @Test
     @DisplayName("2 tests with both positive and negative numbers")
     public void testAdd() {
@@ -175,19 +119,6 @@ public class JUnit5AppTest {
           );
     }
 
-    /**
-     * testAdd_OnlyOnFriday - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>Use the JDK 8 Date/Time API to get the current local date/time, along with a simple Assumption (hint: use
-     * {@link org.junit.jupiter.api.Assumptions#assumeTrue(boolean) assumeTrue()}) that today is Friday
-     * (or any other day of the week of your choosing, just so you pick one), or the test is skipped.</li>
-     * <li>Pass the following numbers as operands to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method: 1, 2, 3, 4, 5</li>
-     * <li>Ensure the actual sum matches the expected sum.</li>
-     * </ol>
-     */
     @Test
     @DisplayName("friday only test")
     public void testAdd_OnlyOnFriday() {
@@ -199,20 +130,7 @@ public class JUnit5AppTest {
       long actualSum = nestedClassApp.add(nums);
       assertEquals(expectedSum, actualSum);
     }
-    /**
-     * testAdd_OnlyOnFriday_WithLambda - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>Use the JDK 8 Date/Time API to get the current local date/time, along with a simple Assumption (hint: use
-     * {@link org.junit.jupiter.api.Assumptions#assumingThat(boolean, org.junit.jupiter.api.function.Executable)
-     * assumingThat()}) that today is Friday
-     * (or any other day of the week of your choosing, just so you pick one), or the test is skipped.</li>
-     * <li>Pass the following numbers as operands to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method: 1, 2, 3, 4, 5</li>
-     * <li>Ensure the actual sum matches the expected sum.</li>
-     * </ol>
-     */
+
     @Test
     @DisplayName("lambda friday test")
     public void testAdd_OnlyOnFriday_WithLambda() {
@@ -229,36 +147,11 @@ public class JUnit5AppTest {
 
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * </ol>
-   * 
-   */
   @Nested
   @DisplayName("When using a single operand")
   class JUnit5AppSingleOperandTest {
     private App classUnderTest;
-    /**
-     * testAdd_NumbersGt0() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of two tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>1</li>
-     * <li>0</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+
     @Test
     @DisplayName("positive number")
     public void testAdd_NumbersGt0() {
@@ -278,23 +171,6 @@ public class JUnit5AppTest {
           });
     }
 
-    /**
-     * testAdd_NumbersLt0() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of two tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1</li>
-     * <li>-10</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
     @Test
     @DisplayName("Num is neg")
     public void testAdd_NumbersLt0() {
@@ -315,32 +191,12 @@ public class JUnit5AppTest {
     }
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * </ol>
-   * 
-   */
+
   @Nested
   @DisplayName("When zero operands")
   class JUnit5AppZeroOperandsTest {
     private App classUnderTest;
-    /**
-     * testAdd_ZeroOperands_EmptyArgument() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Pass an empty array as operands argument to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method.</li>
-     * <li>Ensure that an {@link java.lang.IllegalArgumentException IllegalArgumentException} is thrown (hint: use the
-     * {@link org.junit.jupiter.api.Assertions#assertThrows(Class, org.junit.jupiter.api.function.Executable)
-     * assertThrows()} method).</li>
-     * </ol>
-     */
+
     @Test()
     @DisplayName("Empty argument")
     public void testAdd_ZeroOperands_EmptyArgument() {
@@ -349,20 +205,7 @@ public class JUnit5AppTest {
       assertThrows(IllegalArgumentException.class, () -> classUnderTest.add(nums));
     }
 
-    /**
-     * testAdd_ZeroOperands_NullArgument() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Pass an empty array as operands argument to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method.</li>
-     * <li>Ensure that an {@link java.lang.IllegalArgumentException IllegalArgumentException} is thrown (hint: use the
-     * {@link org.junit.jupiter.api.Assertions#assertThrows(Class, org.junit.jupiter.api.function.Executable)
-     * assertThrows()} method).</li>
-     * <li>The test should fail if the message in the exception is not "Operands argument cannot be null".</li>
-     * </ol>
-     */
+
     @Test
     @DisplayName("Null argument")
     public void testAdd_ZeroOperands_NullArgument() {
-- 
2.25.1

